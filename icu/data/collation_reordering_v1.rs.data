// @generated
/// Implement `DataProvider<CollationReorderingV1>` on the given struct using the data
/// hardcoded in this file. This allows the struct to be used with
/// `icu`'s `_unstable` constructors.
///
/// Using this implementation will embed the following data in the binary's data segment:
/// * 80B for the lookup data structure (6 data identifiers)
/// * 636B[^1] for the actual data (2 unique structs)
///
/// [^1]: these numbers can be smaller in practice due to linker deduplication
///
/// This macro requires the following crates:
/// * `icu_collator`
/// * `icu_locale/compiled_data`
/// * `icu_provider`
/// * `icu_provider/baked`
/// * `zerovec`
#[doc(hidden)]
#[macro_export]
macro_rules! __impl_collation_reordering_v1 {
    ($ provider : ty) => {
        #[clippy::msrv = "1.82"]
        const _: () = <$provider>::MUST_USE_MAKE_PROVIDER_MACRO;
        #[clippy::msrv = "1.82"]
        impl $provider {
            const DATA_COLLATION_REORDERING_V1: icu_provider::baked::zerotrie::Data<icu_collator::provider::CollationReorderingV1> = {
                const TRIE: icu_provider::baked::zerotrie::ZeroTrieSimpleAscii<&'static [u8]> = icu_provider::baked::zerotrie::ZeroTrieSimpleAscii {
                    store: b"und-Han\xC3ist!\"\x1E\xC4psuz\x06\x0C\x12inyin\x80troke\x81nihan\x81huyin\x81\x80\x81",
                };
                const VALUES: &'static [<icu_collator::provider::CollationReorderingV1 as icu_provider::baked::zerotrie::DynamicDataMarker>::DataStruct] = &[
                    icu_collator::provider::CollationReordering {
                        min_high_no_reorder: 4261412864u32,
                        reorder_table: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\0\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0B\x0C\r\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F !\"#$%&'()\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\xD0\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDA\xDB\xDC\xDD\xDE\xDF\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\xF0\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\xA1\xA2\xA3\xA4\xFE\xFF") },
                        reorder_ranges: zerovec::ZeroVec::new(),
                    },
                    icu_collator::provider::CollationReordering {
                        min_high_no_reorder: 4261412864u32,
                        reorder_table: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\0\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0B\x0C\r\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F !\"#$%&'()\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\xD0\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDC\xDB\xDC\xDD\xDE\xDF\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\xF0\xF1\xF2\xF3\xF4\xF5\xF6\xF7\0\xF9\xFA()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\xA1\xA2\xA3\xA4\xFE\xFF") },
                        reorder_ranges: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"'\0v~z\0\0\x81\xA7\xFF\0\xFE") },
                    },
                ];
                unsafe { icu_provider::baked::zerotrie::Data::from_trie_and_values_unchecked(TRIE, VALUES) }
            };
        }
        #[clippy::msrv = "1.82"]
        impl icu_provider::DataProvider<icu_collator::provider::CollationReorderingV1> for $provider {
            fn load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponse<icu_collator::provider::CollationReorderingV1>, icu_provider::DataError> {
                let mut metadata = icu_provider::DataResponseMetadata::default();
                let payload = if let Some(payload) = icu_provider::baked::DataStore::get(
                    &Self::DATA_COLLATION_REORDERING_V1,
                    req.id,
                    req.metadata.attributes_prefix_match,
                ) {
                    payload
                } else {
                    const FALLBACKER: icu_locale::fallback::LocaleFallbackerWithConfig<'static> = icu_locale::fallback::LocaleFallbacker::new().for_config(<icu_collator::provider::CollationReorderingV1 as icu_provider::DataMarker>::INFO.fallback_config);
                    let mut fallback_iterator = FALLBACKER.fallback_for(req.id.locale.clone());
                    loop {
                        if let Some(payload) = icu_provider::baked::DataStore::get(
                            &Self::DATA_COLLATION_REORDERING_V1,
                            icu_provider::DataIdentifierBorrowed::for_marker_attributes_and_locale(req.id.marker_attributes, fallback_iterator.get()),
                            req.metadata.attributes_prefix_match,
                        ) {
                            metadata.locale = Some(fallback_iterator.take());
                            break payload;
                        }
                        if fallback_iterator.get().is_unknown() {
                            return Err(icu_provider::DataErrorKind::IdentifierNotFound.with_req(
                                <icu_collator::provider::CollationReorderingV1 as icu_provider::DataMarker>::INFO,
                                req,
                            ));
                        }
                        fallback_iterator.step();
                    }
                };
                Ok(icu_provider::DataResponse { payload, metadata })
            }
        }
    };
    ($ provider : ty , ITER) => {
        __impl_collation_reordering_v1!($provider);
        #[clippy::msrv = "1.82"]
        impl icu_provider::IterableDataProvider<icu_collator::provider::CollationReorderingV1> for $provider {
            fn iter_ids(&self) -> Result<std::collections::BTreeSet<icu_provider::DataIdentifierCow<'static>>, icu_provider::DataError> {
                Ok(icu_provider::baked::DataStore::iter(&Self::DATA_COLLATION_REORDERING_V1).collect())
            }
        }
    };
    ($ provider : ty , DRY) => {};
    ($ provider : ty , DRY , ITER) => {
        __impl_collation_reordering_v1!($provider, ITER);
    };
}
#[doc(inline)]
pub use __impl_collation_reordering_v1 as impl_collation_reordering_v1;
